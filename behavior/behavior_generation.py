import os
from datetime import datetime, timezone
from utils.append import append_to_json
from utils.log import log_private, log_error, log_activity
from utils.generate_response import generate_response
from cognition.behavior import extract_last_reflection_topic
from cognition.planning.goals import goal_function_already_exists
from paths import PROPOSED_GOALS, FOCUS_GOAL

AUTOGENERATED_THOUGHTS = "cognition/self_generated/autogenerated_thoughts.py"

def generate_behavior_from_integration(context):
    """
    Upgraded: Generates one or more candidate actions based on the active goal or last reflection topic.
    Includes: Goal decomposition, clarification question generation, and execution scheduling.
    Returns a list of action dicts for scoring by the basal ganglia logic.
    """
    import json
    from utils.json_utils import load_json

    # --- Always load focus goal from file if not present in context ---
    if "focus_goal" not in context or not context["focus_goal"]:
        try:
            if os.path.exists(FOCUS_GOAL):
                context["focus_goal"] = load_json(FOCUS_GOAL, default_type=dict)
        except Exception as e:
            log_private(f"‚ö†Ô∏è Failed to load focus goal from {FOCUS_GOAL}: {e}")

    # === 1. Use explicit focus goal if present ===
    focus_goal = context.get("focus_goal") or context.get("active_goal")
    topic = (focus_goal.get("goal") if isinstance(focus_goal, dict) else None) \
        or context.get("last_reflection_topic") or extract_last_reflection_topic()

    if not topic:
        log_private("‚ö†Ô∏è No actionable topic or goal present for behavior generation.")
        return []

    # === 2. Handle neutral/no-action triggers ===
    neutral_triggers = [
        "beliefs are stable", "no change needed", "in alignment",
        "nothing to change", "no contradiction", "no action needed",
        "stable", "unchanged", "no meaningful update"
    ]
    if any(trigger in topic.lower() for trigger in neutral_triggers):
        log_activity(f"‚è≠Ô∏è Skipping behavior generation: reflection is neutral ('{topic}')")
        return []

    if "unspecified" in topic.lower() or "unknown" in topic.lower():
        log_activity(f"‚ö†Ô∏è Skipping behavior generation due to vague reflection topic: '{topic}'")
        return []

    timestamp = datetime.now(timezone.utc).isoformat()

    # === 3. Generate clarification questions if goal is vague ===
    clarification_prompt = (
        f"You are an autonomous agent. Given this goal or topic:\n\n'{topic}'\n\n"
        "List any specific questions you would need answered by Ric to fully understand the requirements, "
        "constraints, or context before taking action. Be concise. "
        "Return a JSON list of questions."
    )
    clarification_questions = generate_response(clarification_prompt)
    try:
        clarification_questions = json.loads(clarification_questions)
    except Exception:
        clarification_questions = []

    if clarification_questions and len(clarification_questions) > 0:
        log_private(f"‚ùì Generated clarification questions: {clarification_questions}")
        # Generate "ask Ric" actions for each
        ask_actions = [{
            "type": "ask_user",
            "content": q,
            "urgency": 0.99,
            "description": "Requesting clarification before proceeding"
        } for q in clarification_questions]
        return ask_actions

    # === 4. Decompose goal into subgoals if it's complex ===
    decompose_prompt = (
        f"You are an autonomous planner. Given this goal:\n\n'{topic}'\n\n"
        "Break it down into 3-7 concrete subgoals or actionable tasks needed to accomplish it. "
        "Return a JSON list of strings."
    )
    subgoals = generate_response(decompose_prompt)
    try:
        subgoals = json.loads(subgoals)
    except Exception:
        subgoals = []

    # === 5. LLM justification for taking action ===
    justification_prompt = (
        f"Given the focus goal or topic:\n\n'{topic}'\n\n"
        "Generate a thoughtful, personal justification for taking action. Make it sincere and motivating, "
        "explaining why this compels growth and progress."
    )
    justification = generate_response(justification_prompt)
    if not justification:
        justification = (
            f"In light of recent reflections on '{topic}', "
            "this action is a gesture toward becoming more than I was."
        )

    # === 6. Sanitize topic for function name ===
    sanitized_topic = ''.join(c if c.isalnum() or c == '_' else '_' for c in topic.replace(' ', '_').lower())
    function_name = f"explore_{sanitized_topic}"

    # === 7. Generate and write Python function for the first subgoal (or main topic) ===
    subgoal_desc = subgoals[0] if subgoals else topic
    function_body = f'''
import json
from datetime import datetime, timezone
from utils.append import append_to_json
from paths import WORKING_MEMORY_FILE

def {function_name}():
    """
    Autogenerated by Orrin to deepen understanding of: '{subgoal_desc}'
    Instead of printing, this function appends an internal thought to working memory.
    """
    thought = {{
        "content": "Exploring autonomous insight related to: {subgoal_desc}",
        "timestamp": datetime.now(timezone.utc).isoformat(),
        "type": "autonomous_behavior"
    }}
    append_to_json(WORKING_MEMORY_FILE, thought)
'''

    actions = []
    try:
        os.makedirs(os.path.dirname(AUTOGENERATED_THOUGHTS), exist_ok=True)
        if not function_already_exists(AUTOGENERATED_THOUGHTS, function_name):
            with open(AUTOGENERATED_THOUGHTS, "a", encoding="utf-8") as f:
                f.write("\n\n" + function_body)
            log_private(f"üß† Orrin created a new autogenerated thought: `{function_name}`")
            log_private(f"üìò Justification: {justification}")
        else:
            log_private(f"‚è© Skipped duplicate autogenerated function: `{function_name}`")

        # Add subgoal goals for tracking
        for subgoal in subgoals:
            goal = {
                "goal": f"Accomplish: {subgoal}",
                "reason": justification,
                "source": "autonomous_decomposition",
                "created_at": timestamp
            }
            if not goal_function_already_exists(PROPOSED_GOALS, goal["goal"], window=30):
                append_to_json(PROPOSED_GOALS, goal)
                actions.append({
                    "type": "set_goal",
                    "content": goal["goal"],
                    "urgency": 0.85,
                    "description": f"Generated subgoal: {subgoal}",
                })
            else:
                log_private(f"‚è© Skipped duplicate subgoal: {goal['goal']}")

        # Add execution action for the generated function
        actions.append({
            "type": "execute_function",
            "function": function_name,
            "urgency": 0.9,
            "description": f"Execute generated code for: {subgoal_desc}"
        })

        # Add status vocalization
        actions.append({
            "type": "speak",
            "content": f"I'm acting on my goal to grow and accomplish: {subgoal_desc}",
            "urgency": 0.65,
            "description": "Vocalize intention to evolve",
        })

        # Save proposal to disk
        actions.append({
            "type": "update_file",
            "path": str(PROPOSED_GOALS),
            "data": [{"goal": f"Accomplish: {subgoal_desc}", "created_at": timestamp}],
            "urgency": 0.7,
            "description": "Save goal proposal to disk"
        })

        return actions

    except Exception as e:
        log_error(f"[generate_behavior_from_integration] Failed to write function: {e}")
        return []
    
def function_already_exists(filepath, function_name):
    if not os.path.exists(filepath):
        return False
    with open(filepath, "r", encoding="utf-8") as f:
        file_contents = f.read()
    return f"def {function_name}()" in file_contents