import os
from datetime import datetime, timezone
from utils.append import append_to_json
from utils.log import log_private, log_error
from utils.generate_response import generate_response
from cognition.behavior import extract_last_reflection_topic
from cognition.planning.goals import goal_function_already_exists
from paths import PROPOSED_GOALS

AUTOGENERATED_THOUGHTS = "cognition/self_generated/autogenerated_thoughts.py"

def generate_behavior_from_integration(context):
    """
    Generates one or more candidate actions based on last reflection topic.
    Returns a list of action dicts for scoring by the basal ganglia logic.
    """
    topic = context.get("last_reflection_topic") or extract_last_reflection_topic()
    neutral_triggers = [
        "beliefs are stable", "no change needed", "in alignment",
        "nothing to change", "no contradiction", "no action needed",
        "stable", "unchanged", "no meaningful update"
    ]
    if any(trigger in topic.lower() for trigger in neutral_triggers):
        log_private(f"‚è≠Ô∏è Skipping behavior generation: reflection is neutral ('{topic}')")
        return []

    if "unspecified" in topic.lower() or "unknown" in topic.lower():
        log_private(f"‚ö†Ô∏è Skipping behavior generation due to vague reflection topic: '{topic}'")
        return []

    timestamp = datetime.now(timezone.utc).isoformat()

    # === Query LLM for justification based on topic ===
    prompt = (
        f"Given the reflection topic:\n\n'{topic}'\n\n"
        "Generate a thoughtful, personal justification for taking action "
        "based on this reflection. Make it sincere and motivating, "
        "explaining why this reflection compels growth and action."
    )
    justification = generate_response(prompt)
    if not justification:
        justification = (
            f"In light of recent reflections on '{topic}'"
            "This action is a gesture toward becoming more than I was."
        )

    # Sanitize topic to safe Python function name
    sanitized_topic = ''.join(c if c.isalnum() or c == '_' else '_' for c in topic.replace(' ', '_').lower())
    function_name = f"explore_{sanitized_topic}"

    function_body = f'''
import json
from datetime import datetime, timezone
from utils.append import append_to_json
from paths import WORKING_MEMORY_FILE

def {function_name}():
    """
    Autogenerated by Orrin to deepen understanding of: '{topic}'
    Instead of printing, this function appends an internal thought to working memory.
    """
    thought = {{
        "content": "Exploring autonomous insight related to: {topic}",
        "timestamp": datetime.now(timezone.utc).isoformat(),
        "type": "autonomous_behavior"
    }}
    append_to_json(WORKING_MEMORY_FILE, thought)
'''

    try:
        os.makedirs(os.path.dirname(AUTOGENERATED_THOUGHTS), exist_ok=True)
        with open(AUTOGENERATED_THOUGHTS, "a", encoding="utf-8") as f:
            f.write("\n\n" + function_body)
        log_private(f"üß† Orrin created a new autogenerated thought: `{function_name}`")
        log_private(f"üìò Justification: {justification}")

        goal = {
            "goal": f"Run and build upon {function_name}()",
            "reason": justification,
            "source": "autonomous_reflection",
            "created_at": timestamp
        }
        if not goal_function_already_exists(PROPOSED_GOALS, goal["goal"], goal["reason"], window=30):
            append_to_json(PROPOSED_GOALS, goal)
        else:
            log_private(f"‚è© Skipped duplicate autonomous goal: {goal['goal']}")

        return [
            {
                "type": "set_goal",
                "content": f"Run and build upon {function_name}()",
                "urgency": 0.85,
                "description": f"Generated based on reflection: {topic}",
            },
            {
                "type": "speak",
                "content": "I'm acting on my recent reflection to grow further.",
                "urgency": 0.65,
                "description": "Vocalize intention to evolve",
            },
            {
                "type": "update_file",
                "path": str(PROPOSED_GOALS),
                "data": [goal],
                "urgency": 0.7,
                "description": "Save goal proposal to disk"
            }
        ]

    except Exception as e:
        log_error(f"[generate_behavior_from_integration] Failed to write function: {e}")
        return []
    