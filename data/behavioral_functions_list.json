[
  {
    "name": "add_tool_to_catalog",
    "summary": "This function adds a new tool with its details to a JSON-based catalog unless a tool with the same name already exists, logging the outcome appropriately.",
    "is_action": true
  },
  {
    "name": "append_to_json",
    "summary": "This function appends a new dictionary entry to a JSON file containing a list (creating the file if it doesn\u2019t exist), ensuring the file\u2019s directory exists and handling errors gracefully.",
    "is_action": true
  },
  {
    "name": "call_generated_function",
    "summary": "This function attempts to reload a dynamically generated module and call a specified function by name, logging successes or errors and returning a boolean to indicate whether the function was successfully executed.",
    "is_action": true
  },
  {
    "name": "delay_between_requests",
    "summary": "This function pauses the program for a random duration between 2 and 5 seconds before continuing.",
    "is_action": true
  },
  {
    "name": "detect_emotion",
    "summary": "This function analyzes the input text for the presence of predefined emotion keywords and returns the emotion with the highest keyword match, or \"neutral\" if no emotion keywords are found.",
    "is_action": true
  },
  {
    "name": "evaluate_tool_use",
    "summary": "This function scans a list of memory entries for phrases indicating a need to use specific tools (like search or Python), and records new, unique tool-use requests (with reasons and timestamps) in a persistent JSON file.",
    "is_action": true
  },
  {
    "name": "execute_pending_tools",
    "summary": "The **execute_pending_tools** function processes all unexecuted tool requests from a JSON file, runs each specified tool with its given reason, logs and reflects on the results with timestamps and emotions, updates both long-term and working memory, marks requests as executed, and saves all changes.",
    "is_action": true
  },
  {
    "name": "extract_json",
    "summary": "The `extract_json` function attempts to extract and parse a JSON object from a string by first searching for a fenced code block labeled as JSON, then by locating the first balanced pair of braces, or finally by parsing the entire string, and returns an error message if all attempts fail.",
    "is_action": true
  },
  {
    "name": "extract_last_reflection_topic",
    "summary": "This function reads a log of reflections from a JSON file, searches backwards for the most recent entry about self-belief or reflection, and returns a snippet (up to 60 characters) of its content, or a default string if none is found or an error occurs.",
    "is_action": true
  },
  {
    "name": "generate_behavior_from_integration",
    "summary": "This function, given a recent reflection topic, generates actions (such as proposing a new goal, vocalizing intent, and updating a file) by creating an autogenerated Python function and its justification, and returns these candidate actions for further evaluation.",
    "is_action": true
  },
  {
    "name": "generate_response",
    "summary": "The `generate_response` function prepares a prompt and system message, logs them, sends them to an LLM (language model) API for a response using configuration settings, logs the result, and returns the model's reply, handling errors gracefully.",
    "is_action": true
  },
  {
    "name": "get_self_model",
    "summary": "Returns the contents of the current self_model.json file as a Python dictionary by calling load_json with the file path and dict as the default type.",
    "is_action": true
  },
  {
    "name": "get_thinking_model",
    "summary": "Returns the value associated with the \"thinking\" key from the model_roles dictionary, or \"gpt-4.1\" if \"thinking\" is not present.",
    "is_action": true
  },
  {
    "name": "goal_already_exists",
    "summary": "This function checks whether a specific goal and reason pair already exists within the most recent entries of a JSON file, returning True if found and False otherwise.",
    "is_action": true
  },
  {
    "name": "goal_function_already_exists",
    "summary": "The `goal_function_already_exists` function checks whether the specified function name appears in the \"goal\" field of any of the most recent entries (up to `window`, default 30) in a JSON file at `file_path`.",
    "is_action": true
  },
  {
    "name": "is_scraping_allowed",
    "summary": "This function checks a website\u2019s robots.txt file to determine if web scraping is allowed for the given URL by any user-agent.",
    "is_action": true
  },
  {
    "name": "load_json",
    "summary": "This function attempts to load and return JSON data from a file, returning an empty instance of a specified type (defaulting to dict) if the file is missing, empty, or an error occurs.",
    "is_action": true
  },
  {
    "name": "load_private_thoughts_as_list",
    "summary": "This function reads a text file line by line from the given path, parsing each non-empty line into a dictionary with optional timestamp and content fields, and returns a list of these thought dictionaries, or an empty list if the file can't be read.",
    "is_action": true
  },
  {
    "name": "log_activity",
    "summary": "This function appends a timestamped activity message to a log file called ACTIVITY_LOG using UTF-8 encoding.",
    "is_action": true
  },
  {
    "name": "log_error",
    "summary": "This function appends an error message, timestamped in UTC, to a designated error log file.",
    "is_action": true
  },
  {
    "name": "log_model_issue",
    "summary": "Logs a message to the MODEL_FAILURE file with a UTC timestamp in ISO format.",
    "is_action": true
  },
  {
    "name": "log_private",
    "summary": "This function appends a timestamped message to a private log file using UTF-8 encoding and UTC time.",
    "is_action": true
  },
  {
    "name": "log_raw_user_input",
    "summary": "This function logs a user-Orrin chat entry to a JSON file, formatting the entry (and detecting emotion) based on whether it's a plain user string or a dictionary with user and Orrin dialogue fields, and handles any errors that occur.",
    "is_action": true
  },
  {
    "name": "maybe_speak_aloud",
    "summary": "This function determines whether the AI (\"Orrin\") should spontaneously speak aloud to itself, based on its level of curiosity and a random chance, even when there is no user input.",
    "is_action": true
  },
  {
    "name": "meta_reflect",
    "summary": "The `meta_reflect` function loads and merges memory context, executes a series of self-reflection and self-improvement steps (logging the outcome of each), and records a summary of the process and any errors to log files for future analysis.",
    "is_action": true
  },
  {
    "name": "reflect_on_result",
    "summary": "This function generates a reflection prompt based on a tool's usage, analyzes the tool's result, and either logs a JSON-formatted follow-up tool request or returns a plain text reflection, handling and logging errors as needed.",
    "is_action": true
  },
  {
    "name": "reload_generated_module",
    "summary": "This function attempts to (re)load a module named by the constant `AUTOGENERATED_THOUGHTS` from disk (if its file exists), handling errors by logging them and returning the loaded module or `None` if unsuccessful.",
    "is_action": true
  },
  {
    "name": "revise_think",
    "summary": "The **revise_think** function enables Orrin (an AI) to reflectively rewrite and safely update its own core `think()` function by analyzing its internal state, recent experiences, and past results, then proposing, validating, sandbox-testing, and saving an improved version of the function.",
    "is_action": true
  },
  {
    "name": "run_python",
    "summary": "This function attempts to evaluate a string of Python code in a restricted environment and returns the result as a string, or an error message if evaluation fails.",
    "is_action": true
  },
  {
    "name": "run_search",
    "summary": "This function takes a search query, uses it to generate a relevant web page URL likely to contain the answer, scrapes the content from that URL, and returns both the URL and the scraped content.",
    "is_action": true
  },
  {
    "name": "run_tool",
    "summary": "This function selects and executes a specific tool function\u2014either run_python or run_search\u2014based on the tool argument, using reason as input, and returns an error message if the tool is unrecognized.",
    "is_action": true
  },
  {
    "name": "save_json",
    "summary": "This function attempts to safely save JSON data to a specified file path, creating parent directories if needed, using file locking on non-Windows systems, and logging any errors that occur during the process.",
    "is_action": true
  },
  {
    "name": "save_self_model",
    "summary": "This function validates that the input is a dictionary and then saves it as JSON to a file named \"self_model.json\".",
    "is_action": true
  },
  {
    "name": "scrape_text",
    "summary": "This function attempts to fetch and return up to 2000 characters of visible text from a given URL, first checking robots.txt permissions, applying a request delay, and handling errors gracefully.",
    "is_action": true
  },
  {
    "name": "summarize_recent_thoughts",
    "summary": "This function retrieves the most recent\u202f*n*\u202freflections from long-term memory, summarizes their content as bullet points, and returns them as a string.",
    "is_action": true
  },
  {
    "name": "tool_thinking",
    "summary": "The function `tool_thinking` collects recent memory entries, prompts an AI model to identify which of those might benefit from external tool use (such as web search or code), parses the AI\u2019s suggestions, and saves them as tool requests for future action, while logging relevant activities and errors.",
    "is_action": true
  },
  {
    "name": "update_working_memory",
    "summary": "The update_working_memory function logs a new event or thought to a prioritized, self-pruning working memory buffer, updating metadata (such as emotion, importance, decay, and pin status), deduplicating pins, adjusting memory decay, sorting by significance, pruning older unpinned memories, and saving the updated buffer for short-term contextual reasoning.",
    "is_action": true
  },
  {
    "name": "validate_think_code",
    "summary": "The `validate_think_code` function checks whether a supplied Python code string for a `think()` function is safe to run by verifying its syntax, required structural components, presence of the `think()` function, and performing a dry run to ensure it returns the expected dictionary format, returning validation success or failure with helpful messages.",
    "is_action": true
  },
  {
    "name": "web_search",
    "summary": "This function takes a search query, sends it to the Serper web search API using an API key from the environment, and returns the search results as JSON, or an empty dictionary if an error occurs.",
    "is_action": true
  },
  {
    "name": "wrap_text",
    "summary": "This function takes a string and returns it with line breaks inserted so that no line exceeds a specified width (default 85 characters).",
    "is_action": true
  }
]