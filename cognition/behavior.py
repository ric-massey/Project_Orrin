
import json
from utils.log import log_error
from paths import REFLECTION
AUTOGENERATED_THOUGHTS = "cognition/self_generated/autogenerated_thoughts.py"

def extract_last_reflection_topic(context=None, reflection_log_path=REFLECTION):
    try:
        # Prefer passed-in context with working_memory
        if context and "working_memory" in context:
            wm = context["working_memory"]
            for entry in reversed(wm[-30:]):  # Only scan the recent buffer
                t = entry.get("type", "").lower()
                if any(keyword in t for keyword in ("self-belief", "reflection", "belief")):
                    content = entry.get("content", "").strip()
                    if content:
                        snippet = content[:60].rsplit(' ', 1)[0]
                        return snippet or content[:60]
        # Fallback to reflection log file
        with open(reflection_log_path, "r", encoding="utf-8") as f:
            reflections = json.load(f)
        if not reflections:
            return "unspecified_reflection_topic"
        for entry in reversed(reflections):
            t = entry.get("type", "").lower()
            if any(keyword in t for keyword in ("self-belief", "reflection", "belief")):
                content = entry.get("content", "").strip()
                if content:
                    snippet = content[:60].rsplit(' ', 1)[0]
                    return snippet or content[:60]
        return "unspecified_reflection_topic"
    except Exception as e:
        log_error(f"[extract_last_reflection_topic] ERROR: {e}")
        return "reflection_topic_unknown"